{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","counter","setCounter","minValue","setMinValue","maxValue","setMaxValue","errorMessage","setErrorMessage","className","type","onChange","event","val","parseInt","target","value","isNaN","onClick","console","log","NaN","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6LA2GeA,MAxGf,WAAgB,IAAD,EACiBC,mBAAS,GAD1B,mBACNC,EADM,KACGC,EADH,OAEmBF,mBAAS,GAF5B,mBAENG,EAFM,KAEIC,EAFJ,OAGmBJ,mBAAS,KAH5B,mBAGNK,EAHM,KAGIC,EAHJ,OAI2BN,mBAAS,IAJpC,mBAINO,EAJM,KAIQC,EAJR,KAiFb,OACE,sBAAKC,UAAU,MAAf,UACE,sBAAKA,UAAU,YAAf,UACE,sBAAKA,UAAU,aAAf,UACE,wDAAkC,uBAClC,uBAAOA,UAAU,eAAeC,KAAK,SAASC,SAzC/B,SAACC,GACtB,IAAIC,EAAMC,SAASF,EAAMG,OAAOC,OAG5BC,MAAMJ,KACRA,EAAM,GAGJA,GAAOR,GACTD,EAAYS,GACZX,EAAWW,GACXL,EAAgB,KAEhBA,EAAgB,qDA8Bd,sBAAKC,UAAU,aAAf,UACE,wDAAkC,uBAClC,uBAAOA,UAAU,eAAeC,KAAK,SAASC,SA3B/B,SAACC,GACtB,IAAIC,EAAMC,SAASF,EAAMG,OAAOC,OAG5BC,MAAMJ,KACRA,EAAM,KAGJA,GAAOV,GACTG,EAAYO,GACRN,GACFC,EAAgB,KAGlBA,EAAgB,mEAgBhB,mBAAGC,UAAU,eAAb,SAA6BF,IAC7B,sBAAKE,UAAU,UAAf,UACE,wBAAQA,UAAU,SAASS,QA1ET,WAClBD,MAAMH,SAASb,KACjBC,EAAW,GAETY,SAASb,GAAWE,GACtBD,EAAWC,GAGTW,SAASb,GAAWE,GACtBD,EAAWY,SAASb,GAAW,IAiE7B,eACA,uBAAOQ,UAAU,iBAAiBC,KAAK,SAASM,MAAOf,EAASU,SA9DjD,SAACC,GACpBO,QAAQC,IAAIR,EAAMG,OAAOC,OACzB,IAAIH,EAAMC,SAASF,EAAMG,OAAOC,OAC5BH,GAAOR,EACTH,EAAWW,IACFI,MAAMJ,IAAgB,KAARA,IACvBX,EAAWmB,QAyDT,wBAAQZ,UAAU,SAASS,QA1FT,WACtB,IAAIL,EAAMC,SAASb,GACfgB,MAAMJ,GACRX,EAAW,GACJW,EAAMV,GACbD,EAAWC,GAGTU,EAAMR,GAAYQ,GAAOV,GAC3BD,EAAWW,EAAM,IAiFf,kBAEF,oJC1FSS,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.497291bc.chunk.js","sourcesContent":["import './App.css';\nimport { useState } from 'react';\n\nfunction App() {\n  const [counter, setCounter] = useState(1);\n  const [minValue, setMinValue] = useState(1);\n  const [maxValue, setMaxValue] = useState(1000);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n\n  /* function for increasing counter */\n  const increaseCounter = () => {\n    let val = parseInt(counter);\n    if (isNaN(val))\n      setCounter(1);\n    else if (val < minValue) {\n      setCounter(minValue);\n    }\n\n    if (val < maxValue && val >= minValue) {\n      setCounter(val + 1);\n    }\n  }\n\n  /* function for decreasing counter */\n  const decreaseCounter = () => {\n    if (isNaN(parseInt(counter)))\n      setCounter(1);\n\n    if (parseInt(counter) < minValue) {\n      setCounter(minValue);\n    }\n\n    if (parseInt(counter) > minValue)\n      setCounter(parseInt(counter) - 1);\n  }\n\n  /* function to set counter when typing manually */\n  const handleChange = (event) => {\n    console.log(event.target.value);\n    let val = parseInt(event.target.value);\n    if (val <= maxValue) {\n      setCounter(val);\n    } else if (isNaN(val) || val === \"\") {\n      setCounter(NaN);\n    }\n  }\n\n  /* Checking and assigning Minimum value */\n  const handleMinValue = (event) => {\n    let val = parseInt(event.target.value);\n\n    // Check if NaN this would occur when you type a value and afterwards change it and leave it as blank.\n    if (isNaN(val)) {\n      val = 0;\n    }\n\n    if (val <= maxValue) {\n      setMinValue(val);\n      setCounter(val);\n      setErrorMessage(\"\");\n    } else {\n      setErrorMessage(\"Min value cannot be greater than Max value.\");\n    }\n  }\n\n  /* Checking and assigning Maximum value */\n  const handleMaxValue = (event) => {\n    let val = parseInt(event.target.value);\n\n    // Check if NaN this would occur when you type a value and afterwards change it and leave it as blank.\n    if (isNaN(val)) {\n      val = 1000;\n    }\n\n    if (val >= minValue) {\n      setMaxValue(val);\n      if (errorMessage) {\n        setErrorMessage(\"\");\n      }\n    } else {\n      setErrorMessage(\"Max Value should be greater than or equal to Min value\");\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"setMinMax\">\n        <div className=\"initialize\">\n          <label>Enter Minimum Value</label><br />\n          <input className=\"initialValue\" type=\"number\" onChange={handleMinValue} />\n        </div>\n        <div className=\"initialize\">\n          <label>Enter Maximum Value</label><br />\n          <input className=\"initialValue\" type=\"number\" onChange={handleMaxValue} />\n        </div>\n      </div>\n      <p className=\"errorMessage\">{errorMessage}</p>\n      <div className=\"counter\">\n        <button className=\"decBtn\" onClick={decreaseCounter}>-</button>\n        <input className=\"displayCounter\" type=\"number\" value={counter} onChange={handleChange} />\n        <button className=\"incBtn\" onClick={increaseCounter}>+</button>\n      </div>\n      <p>Default Minimum: 1 and Maximum: 1000. The Minimum and Maximum values can be changed using the textbox provided.</p>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}